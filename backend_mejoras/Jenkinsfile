pipeline {
    agent any                       // se ejecuta en el contenedor Jenkins

    environment {
        SONARQUBE_ENV = 'sonarqube' // nombre del server Sonar configurado en Jenkins
        PROJECT_DIR   = 'backend_mejoras'
    }

    stages {

        /* 1Ô∏è‚É£ Clone   (PAT embebido o credencial Jenkins) */
        stage('Clonar repositorio') {
            steps {
                git branch: 'main',
                     url: 'https://x-access-token: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@github.com/ffrank123/EXAMENN.git'
            }
        }

        /* 2Ô∏è‚É£ Composer + artisan key */
        stage('Instalar dependencias') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh '''
                        composer install --no-interaction --prefer-dist
                        cp .env.ci .env
                        php artisan key:generate
                    '''
                }
            }
        }

        /* 3Ô∏è‚É£ Migraciones & Test */
        stage('Pruebas') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh '''
                        php artisan migrate --seed --force
                        php artisan test \
                          --log-junit storage/test-results.xml \
                          --coverage-clover storage/coverage/clover.xml
                    '''
                }
            }
        }

        /* 4Ô∏è‚É£ SonarQube */
        stage('An√°lisis SonarQube') {
            steps {
                dir("${PROJECT_DIR}") {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        sh '''
                          sonar-scanner \
                            -Dsonar.projectKey=turismo-capachica \
                            -Dsonar.sources=app \
                            -Dsonar.tests=tests \
                            -Dsonar.php.coverage.reportPaths=storage/coverage/clover.xml
                        '''
                    }
                }
            }
        }

        /* 5Ô∏è‚É£ Quality Gate */
        stage('Quality Gate') {
            steps { waitForQualityGate abortPipeline: true }
        }

        /* 6Ô∏è‚É£ Deploy simulado */
        stage('Deploy') {
            steps { echo 'üöÄ Despliegue OK (simulado)' }
        }
    }
}
