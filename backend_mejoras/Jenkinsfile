pipeline {
    agent any                         // usamos el mismo nodo Jenkins

    environment {
        SONARQUBE_ENV = 'sonarqube'   // nombre que diste en ‚ÄúConfigure SonarQube‚Äù
        PROJECT_DIR   = 'backend_mejoras'
        PATH          = "/usr/local/bin:/usr/bin:/bin"   // nos aseguramos
    }

            stage('Bootstrap tools (si faltan)') {
            steps {
                sh '''
                   set -e

                   # -------------------------------------------------------------------------
                   # 1) PHP 8.2 CLI + TODAS las extensiones que necesita un Laravel t√≠pico
                   # -------------------------------------------------------------------------
                   if ! php -v 2>/dev/null | grep -q 8.2; then
                       echo "Instalando PHP 8.2‚Ä¶"
                       apt-get update -qq
                       apt-get install -y --no-install-recommends \
                           lsb-release ca-certificates wget gnupg
                       wget -qO- https://packages.sury.org/php/apt.gpg | \
                           gpg --dearmor -o /usr/share/keyrings/php.gpg
                       echo "deb [signed-by=/usr/share/keyrings/php.gpg] \
                           https://packages.sury.org/php $(lsb_release -sc) main" \
                           > /etc/apt/sources.list.d/php.list
                       apt-get update -qq
                   fi

                   # Lista de m√≥dulos requeridos por Composer
                   REQ_PKGS="
                     php8.2-cli
                     php8.2-zip
                     php8.2-mysql
                     php8.2-xml      # dom + xml
                     php8.2-curl
                     php8.2-mbstring # por si lo pide m√°s adelante
                   "

                   # instala s√≥lo los que falten
                   for P in $REQ_PKGS; do
                       dpkg -s "$P" >/dev/null 2>&1 || NEED_PKGS="$NEED_PKGS $P"
                   done
                   if [ -n "$NEED_PKGS" ]; then
                       echo "Instalando extensiones PHP faltantes:$NEED_PKGS"
                       apt-get install -y --no-install-recommends $NEED_PKGS
                   fi

                   # -------------------------------------------------------------------------
                   # 2) Composer
                   # -------------------------------------------------------------------------
                   if ! command -v composer >/dev/null; then
                       echo "Instalando Composer‚Ä¶"
                       curl -sS https://getcomposer.org/installer | php \
                           -- --install-dir=/usr/local/bin --filename=composer
                   fi

                   # -------------------------------------------------------------------------
                   # 3) sonar-scanner
                   # -------------------------------------------------------------------------
                   if ! command -v sonar-scanner >/dev/null; then
                       echo "Instalando sonar-scanner‚Ä¶"
                       curl -sL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/\
sonar-scanner-cli-5.0.1.3006-linux.zip -o /tmp/ss.zip
                       unzip -qq /tmp/ss.zip -d /opt
                       ln -sf /opt/sonar-scanner-*/bin/sonar-scanner /usr/local/bin/sonar-scanner
                   fi

                   echo "------------------------------"
                   php -m | grep -E 'curl|dom|xml'   # comprobaci√≥n r√°pida
                   composer --version
                   echo "Bootstrap finalizado ‚úî"
                '''
            }
        }


        /* 1Ô∏è‚É£  Checkout */
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-pat',
                    url: 'https://github.com/ffrank123/EXAMENN.git'
            }
        }

        /* 2Ô∏è‚É£  Instalar dependencias */
        stage('Instalar dependencias') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh '''
                      composer install --no-interaction --prefer-dist
                      [ -f .env ] || cp .env.example .env
                      php artisan key:generate --ansi
                    '''
                }
            }
        }

        /* 3Ô∏è‚É£  Pruebas */
        stage('Pruebas') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh '''
                      php artisan migrate --seed --force
                      php artisan test \
                        --log-junit storage/test-results.xml \
                        --coverage-clover storage/coverage/clover.xml
                    '''
                }
            }
        }

        /* 4Ô∏è‚É£  An√°lisis SonarQube */
        stage('SonarQube') {
            steps {
                dir("${PROJECT_DIR}") {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        sh '''
                          sonar-scanner \
                            -Dsonar.projectKey=turismo-capachica \
                            -Dsonar.sources=app \
                            -Dsonar.tests=tests \
                            -Dsonar.php.coverage.reportPaths=storage/coverage/clover.xml
                        '''
                    }
                }
            }
        }

        /* 5Ô∏è‚É£  Quality Gate */
        stage('Quality Gate') {
            steps { waitForQualityGate abortPipeline: true }
        }

        /* 6Ô∏è‚É£  Deploy */
        stage('Deploy') {
            steps { echo 'üöÄ  Despliegue simulado (todo OK)' }
        }
    }
}
