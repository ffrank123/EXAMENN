pipeline {
    agent any                                  // usamos el propio nodo Jenkins

    environment {
        SONARQUBE_ENV = 'sonarqube'            // nombre del server que creaste en ‚ÄúManage Jenkins ‚Üí Configure SonarQube Servers‚Äù
        PROJECT_DIR   = 'backend_mejoras'
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-pat',
                    url: 'https://github.com/ffrank123/EXAMENN.git'
            }
        }

        stage('Instalar dependencias') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh '''
                        composer install --no-interaction --prefer-dist
                        cp .env.example .env       # cambia si usas otro .env
                        php artisan key:generate
                    '''
                }
            }
        }

        stage('Pruebas') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh '''
                        php artisan migrate --seed --force
                        php artisan test \
                            --log-junit storage/test-results.xml \
                            --coverage-clover storage/coverage/clover.xml
                    '''
                }
            }
        }

        stage('SonarQube') {
            steps {
                dir("${PROJECT_DIR}") {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        sh '''
                            sonar-scanner \
                              -Dsonar.projectKey=turismo-capachica \
                              -Dsonar.sources=app \
                              -Dsonar.tests=tests \
                              -Dsonar.php.coverage.reportPaths=storage/coverage/clover.xml
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }

        stage('Deploy') {
            steps {
                echo 'üöÄ  Despliegue simulado (todo OK)'
            }
        }
    }
}
